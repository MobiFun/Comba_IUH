##############################################################
# $URL: http://memo.prisma/svn/tm/scriptProt/BSSAP_COMBA/tags/BSSAP_COMBA-1.2.0/scripts/bssap_gs.tsm $
#
# $Author: roger $
#
# Description: BSSAP layer on BSS side
#
# $Rev: 53313 $
#
# $Date: 2012-07-19 15:19:13 +0200 (Thu, 19 Jul 2012) $
##############################################################

#Global var for RR
set glRrGcReqMsId 0
set glRrGcReqGrCallRef 0

##############################################################
# INIT
##############################################################

proc Init { args } {

	# Global Variables
	global _HandleRxSignalProc _self protName 
	global glBscDb glMsDb glBssapDb
	global glVGCSBSSAPPid __tm_top glMSVgcsDb
	global glNumOMReset

	# dumping message (hex) in log file
	dump_on

	# BSSAP script directory 
	include "common/utils/generalUtils.tsm"
	include "common/utils/Ss7SaalUtils.tsm"
	include "common/utils/L3Utils.tsm"
	include "protocols/BSSAP/bssap_utils.tsm"
	include "protocols/BSSAP/bssap_multi_inst.tsm"

	# evaluate configuration
	set cfgFile [lindex $args 0]
	uplevel #0 include $cfgFile

	register BSSAP
	register BSSAPPLUS

	# Create Ms Db
	set glMsDb [lindex $args 1]

	# Bssap Adapation Layer
	set Al [lindex $args 2]
	include "$Al"

	# Calculate the PLMN string
	RetrievePLMN

	# Create Internal Ms Database
	set glBssapDb BssapDb
	CreateBssapDb $glBssapDb

	# Create Internal Bsc Database
	set glBscDb BssapBscDb
	CreateBscDb $glBscDb

	if { ![IsAnySgsnLink $glBscDb] } {
		# Resource Management
		CreateTrafficRes
	}

	# handle multi-instance
	set _HandleRxSignalProc RxSignalProc


	if { $__tm_top > 5 } {
		global _self
		DeclareInternalVGCSSignals
		# Create the VGCS Side and store his pid
		set glVGCSBSSAPPid [spawn "protocols/BSSAP/vgcs_bsc.tsm $_self $glMsDb"]
		set glMSVgcsDb MSVGCSdb
		CreateMSVgcsDb $glMSVgcsDb
	} else {
		set glVGCSBSSAPPid ?
	}

	# Number of times for sending of the RST signal to MSC (O&M parameter)
	set glNumOMReset 5

    nextstate BssapWaitConfig

	# Redefine Sub System Number, note: see SendSccpNConnectReq
	global ssn
	set ssn 98

}

# Unitdata Req
# Special version for BSSAP+

proc SendSccpNUnitdataReq2 { bssapSig } {

	# Global Variables
	global glBssapDb glMsId ssn

	# Parameters
	set sequence_control 255
	set return_option 0

	# getting Spc/StkId from database
	set spc [DbGet $glBssapDb $glMsId Spc]
	set stkid [DbGet $glBssapDb $glMsId StkId]

	new SCCP_N_UNITDATA_REQ s

	# Spc
	wr s Spc $spc
	# StkId
	wr s StkId $stkid

	# Dst
	set dst [uitoh $stkid]; ## StkId
	append dst [uctoh $ssn]; ## Ssn
	append dst 42; ## Ai
	append dst 00; ## Nai
	append dst 00; ## Np
	append dst 00; ## Es
	append dst 00; ## Tt
	append dst 0000000000000000000000000000000000\
               0000000000000000000000000000000000; ## Gtai

	# Src
	set src [uitoh $spc]; ## Spc
	append src [uctoh $ssn]; ## Ssn
	append src 43; ## Ai
	append src 00; ## Nai
	append src 00; ## Np
	append src 00; ## Es
	append src 00; ## Tt
	append src 0000000000000000000000000000000000\
               0000000000000000000000000000000000; ## Gtai 
	
	# Dst
	wr s Dst $dst
	# Src
	wr s Src $src
	# SeqCtl
	wr s SeqCtl $sequence_control
	# RetOpt
	wr s RetOpt $return_option

	# Pdu
	if { ![IsVoid $bssapSig] } {
		wr s Data [bssapPlusSigToPdu bssapSig]
	}

	send s
}

proc IsAnySgsnLink { bscDb } {
	global __bsc_db
	set bscDb [DbGetName $__bsc_db]
	set indexList [DbGetIndexList $bscDb]
	set result 0
	foreach idx $indexList {
		set sgsnLink [DbGet $bscDb $idx GsLink]
		if { $sgsnLink } {
			return 1
		}
	}
	
	return $result
}

proc DeclareInternalVGCSSignals { } {
	typedef { STRUCT {UINT MsId} {STRING SpcStkIdCid} VGCS_CALL_BEGIN }
	typedef { STRUCT {UINT MsId} VGCS_TALKER_REQUEST }
	typedef { STRUCT {UINT MsId} {HEXSTR GroupCallRef} {STRING SpcStkIdCid} VGCS_JOIN_REQ }
	typedef { STRUCT {UINT MsId} {HEXSTR GroupCallRef} {STRING SpcStkIdCid} VGCS_SUBTALKER }
	typedef { STRUCT {STRING Signal} VGCS_FORWARD_TO_MM }
}

proc CreateMSVgcsDb { dbname } {
	lappend idxList [list	Idx				Index]
	lappend idxList [list	PduGrCallRef	Normal	Read/Write]
	lappend idxList [list	Status			Normal	Read/Write]

	#CreateDataBase $dbname
}

#------------------------------------------------------------#
# Configuration procedure 					
#------------------------------------------------------------#
proc BssapConfig { } {

	# Declare and Initialize Global Variables
	global glBssapDb glMsDb glInstNull glBscDb

	set nstate BssapIdle

	# Create Instance Null
	set glInstNull 0
	DbCreateDefEntry $glBssapDb $glInstNull
	DbSet $glBssapDb $glInstNull State $nstate

	# consider only the entry #0 for the BSC
 	set spc [DbGet $glBscDb 1 Opc]
	set stkId [DbGet $glBscDb 1 StkId]

	# Configure Parameters for every DB Index
	set idxlist [DbGetIndexList $glMsDb]
	foreach idx $idxlist {
	
		DbCreateDefEntry $glBssapDb $idx

		# Set State
		DbSet $glBssapDb $idx State $nstate 

		# Set LAC 
		set lai [DbGet $glMsDb $idx SysInfoLAI]
		set lac [hocts $lai 3 4]
		DbSet $glBssapDb $idx LAC $lac

		# Set CellId
		set cellid [DbGet $glMsDb $idx CellId]
		DbSet $glBssapDb $idx CellId $cellid
		DbSet $glBssapDb $idx Spc $spc 
		DbSet $glBssapDb $idx StkId $stkId
	}
	
	SendNotifyOk 

	logscr ""
	logscr "BSSAP GS-LINK BRING-UP COMPLETE"
	logscr ""

	nextstate $nstate
}

proc SendNotifyOk { } {

	# Global Variables

	new 	BSSAP_OM_CFG_ACK s
	send  s
	LogOutputMsg $s
}

##############################################################
# BSSMAP procedures (see TS 3GPP 08.08 v.8.15.0)
##############################################################

#------------------------------------------------------------#
# 3.1.1 "Assignment" procedure functions 
#------------------------------------------------------------#
proc RcvAssignmentReq { } {

	# Global Variables
	global _sig protName glBscDb glBtsDb glBssapDb glMsId

	LogInputMsg $_sig

	# Get Bsc Id
	set lac [DbGet $glBssapDb $glMsId LAC]
	set ci [DbGet $glBssapDb $glMsId CellId]
	set bscid [GetBscIdByCellIdfr $lac $ci glBtsDb]
	if { [string match "-1" $bscid] } {
		abort "BSC identity unknown (LAC=$lac, CellId=$ci)"
	}

	# Channel Type
	set ch_type [rd _sig ch_type]
	set cell_info [GetChannelTypeInfo $ch_type]
	DbSet $glBssapDb $glMsId Spi [set spi [lindex $cell_info 0]]
	DbSet $glBssapDb $glMsId ChannelRate [set ch_rate [lindex $cell_info 1]]
	DbSet $glBssapDb $glMsId PermSpeech [set perm_speech [lindex $cell_info 2]]
	DbSet $glBssapDb $glMsId DataRate [set datarate [lindex $cell_info 3]]
	GetPoolListByChannel ch_pool_list cause
	if { [info exist cause] } {
		SendAssignmentFail $bscid $cause
		return
	}

	# Circuit Identity Code
	set circ_idty_code [rd _sig circ_idty_code]

	if { ![IsVoid $circ_idty_code] 
	  && [string match "0" [DbGet $glBscDb $bscid AllocCics]] } {

		set cic [htous $circ_idty_code B]
		switch -glob -- [cicUse $cic] {
			"0" {
				# Get Key of current cic
				set cickey [cicUid $cic]
				if { [string match "-1" $cickey] } {
					# Invalid Cic Key (-1)
					set cause 22; # "Requested terrestrial resource unavailable"
					SendAssignmentFail $bscid $cause
					return
				}

				# Get Pool of current cic
				set cic_pool [hocts [uitoh $cickey B] 1]
				if { [string match "-1" [lsearch $ch_pool_list [htouc $cic_pool]]] } {
					set cause 31; # "Circuit pool mismatch"
					SendAssignmentFail $bscid $cause
					return
				}

				# Set Cic in local db
				DbSet $glBssapDb $glMsId Cic $cic

				SendAssignmentCmplt $bscid $spi $ch_rate "?" $cic_pool
			}
			"-[34]" {
				# Invalid Cic (-3) / Resource not created (-4)
				set cause 22; # "Requested terrestrial resource unavailable"
				SendAssignmentFail $bscid $cause
			}
			"-5" {
				# Resource is busy (-5)
				set cause 50; # "Terrestrial circuit already allocated"
				SendAssignmentFail $bscid $cause
			}
			"-6" {
				# Resource is blocked (-6)
				set cause 22; # "Requested terrestrial resource unavailable"
				SendAssignmentFail $bscid $cause
				SendBlk $cic $cause 0
			}
			default { abort "Resource Assignment procedure failed" }
		}

	} else {

		if { ![string match 0 [DbGet $glBscDb $bscid AllocCics]] } {
			GetTrfCic $bscid $ch_type cic fail
			if { [info exists fail] } {
				logscr "Resource Assignment procedure failed ([GetCause $protName $fail])"
				return
			} else {
				DbSet $glBssapDb $glMsId Cic $cic
				set circ_idty_code [ustoh $cic B]
			}
		}

		SendAssignmentCmplt $bscid $spi $ch_rate $circ_idty_code "?"
	} 
}

proc SendAssignmentCmplt { bscid spi ch_rate circ_idty_code cic_pool } {

	# Global Variables
	global _sig glBssapDb glMsId

	# RR Cause
	set rr_cause 00; # "Normal event"

	new ASG_CMPLT s
	wr s rr_cause $rr_cause
	wr s chsn_ch [GetChosenChannel $spi $ch_rate]
	wr s circ_idty_code $circ_idty_code
	if { [GetPools $bscid] > 1 } {
		wr s circ_pool $cic_pool
	}

	LogOutputMsg $s
	set spcstkidcid [DbGet $glBssapDb $glMsId SpcStkIdCid]
	SendSccpNDataReq $spcstkidcid $s

	# sending RR_SYNC_IND (res: 1 = Resource Assignment)
	set res 1
	SendRrSyncInd $res "?"
}

proc SendAssignmentFail { bscid cause } {

	# Global Variables
	global _sig glBssapDb glMsId

	new ASG_FAIL s
	wr s cause $cause
	if { [GetPools $bscid] > 1 } {
		# TODO set pool ???
		set pool "?"
		wr s circ_pool $pool
	}

	LogOutputMsg $s

	set spcstkidcid [DbGet $glBssapDb $glMsId SpcStkIdCid]
	SendSccpNDataReq $spcstkidcid $s
}

# In "Assignment Complete" and "Assignment Failure" msg 
# the IE "Circuit pool" shall be included when several circuit pools
# are present on the BSC-MSC interface
proc GetPools { bscid } {

	# Global Variables
	global glTrfDb

	foreach trlinkid [DbGetIndexList $glTrfDb($bscid)] {
		lappend pool_list [DbGet $glTrfDb($bscid) $trlinkid PoolType]
	}

	return [llength [lsort -unique $pool_list]]
}

#------------------------------------------------------------#
# 3.1.2 "Blocking and Unblocking" procedure functions
#------------------------------------------------------------#
proc SendBlk { cic cause tmrneeded } {

	# Global Variables
	global _sig 

	new BLK s
	wr 	s circ_idty_code $cic
	wr 	s cause $cause

	LogOutputMsg $s
	SendSccpNUnitdataReq $s

	if { $tmrneeded } {
		# Start timer (time to receipt of BLKG_ACK)
		set tid [DbGet $::glBscDb $bscid T_1id]
		if { [tmrtout $tid] != 0 } {
			tmrstart $tid
		}
	}
}

proc RcvBlkAck { } {

	# Global Variables
	global _sig 

	LogInputMsg $_sig

	# Stop T_1 timer
	set spc [DbGet $::glBssapDb $::glInstNull Spc]
	set bscid [DbGetIdx $::glBscDb Opc $spc]
	tmrstop [DbGet $::glBscDb $bscid T_1id]
}

proc RcvCircGroupBlkAck { } {

	# Global Variables
	global _sig 

	LogInputMsg $_sig
}

proc T_1Expired { } {

	# Global Variables
	global _sig _src glBscDb

	LogInputMsg $_sig

	# TODO Repeat "Block" procedure
}

#------------------------------------------------------------#
# 3.1.3 "Resource Indication" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.4 "Reset" procedure functions
#------------------------------------------------------------#
proc T_13Expired { } {

	# Global Variables
	global _sig _src glBscDb

	LogInputMsg $_sig

	set bscid [DbGetIdx $glBscDb T_13id $_src]

	# Reset All Bsc instances
	BssapAllInstReset

	SendReset $bscid
}

proc SendReset { bscid } {

	# Global Variables
	global _sig glBscDb glBssapDb glMsId

	set spc [DbGet $glBscDb $bscid Opc]
	set stkid [DbGet $glBscDb $bscid StkId]
	DbSet $glBssapDb $glMsId Spc $spc
	DbSet $glBssapDb $glMsId StkId $stkid

	# Cause
	set cause 07; # "OM intervention"

	new 	RST s
	wr      s cause $cause

	LogOutputMsg $s
	SendSccpNUnitdataReq $s

	# Start (time to receipt RST_ACK)
	set tid [DbGet $glBscDb $bscid T_4id]
	if { [tmrtout $tid] != 0 } {
		tmrstart $tid
	}

# TODO
# 	Add "Blocking procedure

	nextstate BssapWaitForResetAck
}

proc RcvReset { } {

	global _sig 

	LogInputMsg $_sig

	# Reset All Bsc instances
	BssapAllInstReset

	SendResetAck
}

proc T_4Expired { } {

	global _sig _src glBscDb glNumOMReset

	LogInputMsg $_sig

	log "T_4Expired: does nothing while Gs link"

	return

	set bscid [DbGetIdx $glBscDb T_4id $_src]

	set glNumOMReset [expr $glNumOMReset - 1]
	if { $glNumOMReset == 0 } {	
		abort "BSSAP Reset for BSC $bscid : Timer T4 expired"
	} else {
		# Send again a RST
		set cause 07; # "OM intervention"
		new		RST s
		wr 		s cause $cause
	
		LogOutputMsg $s
		SendSccpNUnitdataReq $s

		set tid [DbGet $glBscDb $bscid T_4id]
		tmrstart $tid

	}
}

proc SendResetAck { } {

	new 	RST_ACK s

	LogOutputMsg $s

	SendSccpNUnitdataReq $s

	nextstate BssapIdle
}

proc RcvResetAck { } {

	# Global Variables
	global _sig glInstNull glBscDb glBssapDb
	
	LogInputMsg $_sig

	# Stop T_4 timer
	set spc [DbGet $glBssapDb $glInstNull Spc]
	set bscid [DbGetIdx $glBscDb Opc $spc]
	tmrstop [DbGet $glBscDb $bscid T_4id]

	SendBssapCtlResetAck

	nextstate BssapIdle
}

#------------------------------------------------------------#
# 3.1.5 "External Handover" procedure functions
#------------------------------------------------------------#
proc RcvBssapHov { } {

	# Global Variables
	global _sig glBtsDb glBssapDb glMsId
	
	LogInputMsg $_sig
	
	# Cause
	set cause [rd _sig Cause]

	# Target LAC/CellId
	set lac_tgt [rd _sig LAC]
	set ci_tgt [rd _sig CellId]
	# Target Bsc
	set bsc_tgt [GetBscIdByCellIdfr $lac_tgt $ci_tgt glBtsDb]
	if { [string match "-1" $bsc_tgt] } {
		abort "BSC identity unknown (LAC=$lac_tgt, CellId=$ci_tgt)"
	}
	
	# Current LAC/CellId
	set lac [DbGet $glBssapDb $glMsId LAC]
	set ci [DbGet $glBssapDb $glMsId CellId]
	# Current Bsc
	set bsc [GetBscIdByCellIdfr $lac $ci glBtsDb]
	if { [string match "-1" $bsc] } {
		abort "BSC identity unknown (LAC=$lac, CellId=$ci)"
	}

	if { $lac_tgt == $lac && $ci_tgt == $ci } {
		logscr "Handover Required on the current cell (lac=$lac; cell_id=$ci)"
	} elseif { $bsc_tgt == $bsc } {
		# Handover Required is internal to the current Bsc
		SendHovPerformed $cause $lac_tgt $ci_tgt
	} else {
		# Handover Required is external to the current Bsc
		SendHovRequired $cause $lac_tgt $ci_tgt
	}
}

# Sent by Serving Bsc
proc SendHovRequired { cause lac ci } {

	# Global Variables
	global _sig glBssapDb glMsId
	
	# Cell Identifier List 
	set cellidfr 01; # Warning: hardcoded disc (01 = LAC + single Cell)
	append cellidfr $lac
	append cellidfr $ci

	# Current Channel Type 1
	set spi [DbGet $glBssapDb $glMsId Spi]
	set ch_rate [DbGet $glBssapDb $glMsId ChannelRate]

	# Speech Version (Used)
	set perm_speech [DbGet $glBssapDb $glMsId PermSpeech]
	if { $perm_speech != "?" } {
		# Warning: we consider used the first "permitted speech"
		set spch_ver [hocts $perm_speech 1]
	}

	new HOV_RQRD s

	wr 	s cause $cause
	wr	s cell_idfr_list $cellidfr
	wr 	s curr_ch_type_1 [GetCurrChType1 $spi $ch_rate]
	wr 	s spch_ver $spch_ver

	LogOutputMsg $s

	set spcstkidcid [DbGet $glBssapDb $glMsId SpcStkIdCid]
	SendSccpNDataReq $spcstkidcid $s
}

# Received by Target Bsc
proc RcvHovRequest { } {

	# Global Variables
	global _sig
	
	LogInputMsg $_sig

	# Cell Identifier Target
	set cell_info [GetCellInfo [rd _sig cell_idfr_tgt]]
	set lac_tgt [lindex $cell_info 0]
	set ci_tgt [lindex $cell_info 1]

	SendHovRequestAck $lac_tgt $ci_tgt
	# Fede @ 041126 (to test Handover Failure)
	#SendHovFail 
}

# Sent by Target Bsc
proc SendHovFail { } {

	# Global Variables
	global _sig glBssapDb glSpcStkIdCid 
	
	# Send RR Handover Failure
	new HOV_FAIL s 
	wr s cause c0

	LogOutputMsg $s

	# Acknowledge from new BSC
	SendSccpNConnectRes $glSpcStkIdCid $s
}

# Sent by Target Bsc
proc SendHovRequestAck { lac_tgt ci_tgt } {

	# Global Variables
	global _sig glBssapDb glHovInfo glSpcStkIdCid glMsId 
	
	# Store Handover Information
	set hov_num [llength [array names glHovInfo]]
	set hov_ref [expr $hov_num % 256]
	set glHovInfo($hov_ref) "$glSpcStkIdCid $lac_tgt $ci_tgt"

	# Send RR Handover Command
	new RR_HO_CMD s 
	wr s cell_desc ffff
	wr s desc_frst_ch_aft_time ffffff
	wr s ho_ref [uctoh $hov_ref]
	wr s pwr_cmd_and_acc_type ff
	set l3pdu [bssapSigToPdu s]

	new HOV_REQ_ACK s
	wr 	s l3_info $l3pdu

	LogOutputMsg $s

	# Acknowledge from new BSC
	SendSccpNConnectRes $glSpcStkIdCid $s
}

# Received by Serving Bsc
proc RcvHovCommand { } {

	# Global Variables
	global _sig _sigpdu glBssapDb glMsId
	
	LogInputMsg $_sig

	set l3pdu [rd _sig l3_info]
	if { ![string match "?" $l3pdu] } {
		# decode RR Handover Command
		rrPduToSig l3pdu
		# Set Handover Reference 
		set hov_ref [htouc [rd _sigpdu ho_ref]]
		DbSet $glBssapDb $glMsId HovRef $hov_ref

	} else {
		abort "External Handover procedure failed"
	}

	#SendHovDetect $hov_ref
}

# Sent by Target Bsc
proc SendHovDetect { } {

	# Global Variables
	global _sig glHovInfo glBssapDb glMsId

	new HOV_DET s

	LogOutputMsg $s

	set hov_ref [DbGet $glBssapDb $glMsId HovRef]
	set spcstkidcid [lindex $glHovInfo($hov_ref) 0]
	SendSccpNDataReq $spcstkidcid $s

	SendHovCmplt $hov_ref
}

# Sent by Target Bsc
proc SendHovCmplt { hov_ref } {

	# Global Variables
	global _sig glHovInfo glBssapDb glMsId
	
	# Store SS7 infos of the Bsc target
	set spcstkidcid [lindex $glHovInfo($hov_ref) 0]
	DbSet $glBssapDb $glMsId SpcStkIdCidTarget $spcstkidcid
	# Store Cell Identification infos of the Bsc target
	set lac_tgt [lindex $glHovInfo($hov_ref) 1]
	set ci_tgt [lindex $glHovInfo($hov_ref) 2]
	DbSet $glBssapDb $glMsId LACTarget $lac_tgt
	DbSet $glBssapDb $glMsId CellIdTarget $ci_tgt

	new HOV_CMPLT s

	# Warning: hardcoded RR Cause (00 = "normal event")
	wr s rr_cause 00

	LogOutputMsg $s

	set spcstkidcid [lindex $glHovInfo($hov_ref) 0]
	SendSccpNDataReq $spcstkidcid $s

	nextstate BssapConnectActive
}

#------------------------------------------------------------#
# 3.1.5a "Handover from GSM to another System" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.6 "Internal Intra-Cell Handover" procedure functions
#------------------------------------------------------------#
#------------------------------------------------------------#
# 3.1.7 "Internal Inter-Cell Handover" procedure functions
#------------------------------------------------------------#
proc SendHovPerformed { cause lac ci } {

	# Global Variables
	global _sig glBssapDb glMsId
	
	# Store New LAC/CellId
	DbSet $glBssapDb $glMsId LAC $lac
	DbSet $glBssapDb $glMsId CellId $ci

	new HOV_PERFD s

	wr 	s cause $cause
	wr	s cell_idfr [GetCellIdentifier $lac $ci]

	LogOutputMsg $s

	set spcstkidcid [DbGet $glBssapDb $glMsId SpcStkIdCid]
	SendSccpNDataReq $spcstkidcid $s
}

#------------------------------------------------------------#
# 3.1.8 "Handover Candidate Enquiry" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.9 "Release of Radio Resource and Terrestrial Resource" 
#        procedure functions
#------------------------------------------------------------#
proc SendClrReq { cause } {

	# Global Variables
	global glBssapDb glMsId

	new CLR_REQ s
	wr s cause $cause
	
	LogOutputMsg $s

	set spcstkidcid [DbGet $glBssapDb $glMsId SpcStkIdCid]
	SendSccpNDataReq $spcstkidcid $s
}

proc RcvClrCmd { } {

	# Global Variables

	# Sending Clear Complete
	SendClrCmplt
}

proc SendClrCmplt { } {

	# Global Variables
	global glBssapDb glMsId

	new CLR_CMPLT s

	LogOutputMsg $s

	set spcstkidcid [DbGet $glBssapDb $glMsId SpcStkIdCid]
	SendSccpNDataReq $spcstkidcid $s
}


#------------------------------------------------------------#
# 3.1.10 "Paging" procedure functions
#------------------------------------------------------------#
proc RcvPaging { } {

	# Global Variables
	global _sig glMsDb glMsId glBssapDb

	LogInputMsg $_sig

	set imsi [rd _sig imsi]

	if { ![IsVoid $imsi] } {
		set idx [DbGetIdx $glMsDb IMSI $imsi]
		# Check if this MS is registered
		if { [IsVoid [DbGet $glBssapDb $idx TMSI]]} {
			log "Paging received for not registered MS"
		}
	} else {
		abort "WARNING: Paging without IMSI"
	}
	# Set Current Instance
	set glMsId $idx

	# Get Tmsi
	set tmsi [rd _sig tmsi]
	if { $tmsi != "?" } {
		set id "f4"
		append id $tmsi
	} else {
		set id $imsi
	}

    SendPagingResponse $idx $id
}

# simulation paging procedure in BSS environment
proc SendPagingResponse { idx id } {

	# Global Variables
	global glMsDb 

	new RR_PGING_RSP s 
	wr s cphr_key_seq_num 07; # no key is available
	wr s spare_octet 00
	wr s mobile_station_clsmrk [DbGet $glMsDb $idx ClassMark2]
	wr s mobile_id $id
	set l3pdu [rrSigToPdu s]

	# sending CMPLT_L3_INFO
	SendInitialMsMsg $l3pdu

	nextstate BssapPagingResponse
}

#------------------------------------------------------------#
# 3.1.11 "Trace Invocation" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.12 "Flow Control" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.13 "Classmark Handling" procedure functions
#------------------------------------------------------------#
proc RcvClsmkReq { } {

	# Global Variables
	global _sig

	LogInputMsg $_sig

	SendClsmkUpd
}

proc SendClsmkUpd { } {

	# Global Variables
	global _sig glMsDb glBssapDb glMsId

	new CLSMK_UPD s

	wr s clsmk_info_2 [DbGet $glMsDb $glMsId ClassMark2]
	wr s clsmk_info_3 [DbGet $glMsDb $glMsId ClassMark3]

	LogOutputMsg $s

	set spcstkidcid [DbGet $glBssapDb $glMsId SpcStkIdCid]
	SendSccpNDataReq $spcstkidcid $s
}


#------------------------------------------------------------#
# 3.1.14 "Cipher Mode Control" procedure functions
#------------------------------------------------------------#
proc RcvCphrModeCmd { } {
	
	# Global Variables
	global _sig

	LogInputMsg $_sig

	# sending RR_SYNC_IND (res: 0 = Ciphering)
	set res 0
	SendRrSyncInd $res "?"

	# scegliere un solo algoritmo !!!!!
	set chosen_encr_alg [rd _sig encr_info]

	SendCphrModeCmplt $chosen_encr_alg
}

proc SendCphrModeCmplt { chosen_encr_alg } {
	
	# Global Variables
	global _sig glBssapDb glMsId

	new CPHR_MODE_CMPLT s
	wr s chsn_encr_algo $chosen_encr_alg

	set spcstkidcid [DbGet $glBssapDb $glMsId SpcStkIdCid]
	SendSccpNDataReq $spcstkidcid $s

    nextstate BssapConnectActive
}

#------------------------------------------------------------#
# 3.1.15 "General SCCP Abnormal Conditions" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.16 "Initial MS Msg" procedure functions 
#------------------------------------------------------------#
proc SendInitialMsMsg { l3pdu } {

	# Global Variables
	global _sig _state glBtsDb glBssapDb glMsId glBscDb

	set lac [DbGet $glBssapDb $glMsId LAC]
	set ci [DbGet $glBssapDb $glMsId CellId]

	new CMPLT_L3_INFO s
	
	# Cell Identifier
	set cell_ident [GetCellIdentifier $lac $ci]
	wr      s cell_idfr $cell_ident
	# L3 info
	wr      s l3_info $l3pdu

	LogOutputMsg $s

	# getting LinksetId from Bsc/Bts databases
	set bscid [GetBscIdByCellIdfr $lac $ci glBtsDb]
	if { $bscid == "-1" } {
		abort "BSC identity unknown (LAC=$lac, CellId=$ci)"
	}

	SendSccpNConnectReq $glBscDb $glMsId $bscid $s 3
}

#------------------------------------------------------------#
# 3.1.17 "Queueing Indication" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.18 "Data Link Control SAPI not Equal to 0" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.19 "BSSMAP Error Handling" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.20 "Load Indication" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.21 "Voice group call service and voice broadcast service
#         call set-up and resource assignment" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.22 "Voice group call service and voice broadcast service
#         assignment" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.23 "void"
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.24 "Voice group call uplink control" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.25 "PDSS1 flow control" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.26 "Circuit re-selection" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.27 "LSA handling" procedure functions
#------------------------------------------------------------#
# TODO

#------------------------------------------------------------#
# 3.1.28 "Location Acquisition" procedure functions
#------------------------------------------------------------#
proc RcvPerfLocReq { } {
	
	# Global Variables
	global _sig 

	LogInputMsg $_sig

	# Send Location Response to MSC
	SendPerfLocRsp
}

# Warning !!! Hardcoded values inside
proc SendPerfLocRsp { } {
	
	# Global Variables
	global _sig glBssapDb glMsId

	new PERF_LOC_RSP s
	wr s loc_estm 00

	LogOutputMsg $s

	set spcstkidcid [DbGet $glBssapDb $glMsId SpcStkIdCid]
	SendSccpNDataReq $spcstkidcid $s
}

#------------------------------------------------------------#
# 3.1.29 "Connectionless Information Transfer" procedure functions
#------------------------------------------------------------#
# see "SendSccpNUnitdataReq" and "DecSccpNUnitdataInd"

#------------------------------------------------------------#
# 3.1.30 "Common Id" procedure functions 
#------------------------------------------------------------#
proc SendCommonId { } {

	# Global Variables
	global _sig glBssapDb glMsDb glMsId

	set 	Imsi [DbGet $glMsDb $glMsId IMSI]

	# sending COMMON_ID
	new 	COMMON_ID s
	wr  s imsi $Imsi

	set spcstkidcid [DbGet $glBssapDb $glMsId SpcStkIdCid]
	SendSccpNDataReq $spcstkidcid $s
}

proc RcvCommonId { } {

	# Global Variables
	global _sig glBssapDb glMsDb glMsId

	LogInputMsg $_sig

	# check COMMON_ID
	set Imsi [rd _sig imsi]
	set imsi [DbGet $glMsDb $glMsId IMSI]
	if { $Imsi != $imsi } {
		abort "Error: Unexpected IMSI ($Imsi) in COMMON ID, expected $imsi"
	}
}

##############################################################
# DTAP procedures (see TS 3GPP 08.06 v.8.0.1)
##############################################################

proc SendDirectTransfer { dlci l3pdu } {

	# Global Variables
	global _sig glBssapDb glMsId

	new DTAP_DATA s
	## Dlci
	wr s Dlci $dlci
	## Data
	wr s Data $l3pdu

	set spcstkidcid [DbGet $glBssapDb $glMsId SpcStkIdCid]
	SendSccpNDataReq $spcstkidcid $s
}

proc RcvDirectTransfer { } {

	# Global Variables
	global _sig glMsId

	LogInputPrim $_sig

	set l3pdu [rd _sig Data]
		
	SendRrDataInd $l3pdu
}

##############################################################
# PRMITIVES HANDLING
##############################################################

















# BSSAP_CTL_RESET
proc RcvCtlReset { } {

	# Global Variables
	global _sig glBscDb 

	LogInputMsg $_sig

	log "Does nothing while Gs link"

	global gPlayerTmr

	set gPlayerTmr [tmrnew T_FIRSTPLAYER 2000]
	tmrstart $gPlayerTmr

	nextstate WaitForFirstPlayerTimer

}

proc TFirstPlayer { } {
	global glBscDb glMsId

	logscr "TFirstPlayer"

	new BSSAPPLUS_LOC_UPD_REQ s

	wr	s	IMSI				"2922000010"
	wr	s	SGSNnum				1
	wr	s	UpdateType			00
	# |MNC + MCC  |LAC      |RAC  |CELLID     |
	# |2 oct      |2 oct    |1 oct|2 oct      | 
	wr	s	NewCellGlobalId		00f11003E8000A97
	wr	s	MsClassMark			53

	set glMsId 1

	SendSccpNUnitdataReq2 $s

	nextstate WaitForLUAccept
}

proc SccpNUnitDataIndLUAccept { } {
	global _sig _sigpdu glMsId

	set data [rd _sig Data]

	bssapPlusPduToSig data

	set sigName [lindex $_sigpdu 0]
	log "SccpNUnitDataIndLUAccept sigName = $sigName"

	if { ![string compare $sigName "BSSAPPLUS_LOC_UPD_ACC"] } {
		logscr "SccpNUnitDataIndLUAccept: recived LU accept"

		new BSSAPPLUS_TMSI_REALL_COMPLETE s
		wr	s	IMSI	"2922000010"
		
		set glMsId 1

		SendSccpNUnitdataReq2 $s
	
		# Preapare timers for the second test
		global gPlayerTmr
		tmrfree $gPlayerTmr

		set gPlayerTmr [tmrnew T_SECONDPLAYER 4000]
		tmrstart $gPlayerTmr
		
		nextstate WaitForSecondPlayerTimer
	}
}

proc TSecondPlayer { } {
	global glBscDb glMsId

	logscr "TSecondPlayer"

	new BSSAPPLUS_LOC_UPD_REQ s

	# Use an unknown IMSI
	wr	s	IMSI				"2922001111"
	wr	s	SGSNnum				1
	wr	s	UpdateType			00
	# |MNC + MCC  |LAC      |RAC  |CELLID     |
	# |2 oct      |2 oct    |1 oct|2 oct      | 
	wr	s	NewCellGlobalId		00f11003E8000A97
	wr	s	MsClassMark			53

	set glMsId 1

	SendSccpNUnitdataReq2 $s

	nextstate WaitForLUReject
}

proc SccpNUnitDataIndLUReject { } {
	global _sig
}

#-------------------------------------------------------------
# State machine for dummy player
#-------------------------------------------------------------

state WaitForFirstPlayerTimer {
	T_FIRSTPLAYER		TFirstPlayer
	default		Any
}

state WaitForSecondPlayerTimer {
	T_SECONDPLAYER		TSecondPlayer
	default		Any
}

state WaitForLUAccept {
	SCCP_N_UNITDATA_IND SccpNUnitDataIndLUAccept
}

state WaitForLUReject {
	SCCP_N_UNITDATA_IND SccpNUnitDataIndLUReject
}













#------------------------------------------------------------#
# receiving signals from SCCP adaptation layer 
#------------------------------------------------------------#

# CONNECT_ACK
proc RcvConnectAck { } {

	# Global Variables
	global _sig glBssapDb glMsId

	LogInputMsg $_sig
		
	set spcstkidcid [rd _sig SpcStkIdCid]
	set spc [GetSpc $spcstkidcid]
	set stkid [GetStkId $spcstkidcid]

	# Store SpcStkIdCid
	DbSet $glBssapDb $glMsId SpcStkIdCid $spcstkidcid
	DbSet $glBssapDb $glMsId Spc $spc
	DbSet $glBssapDb $glMsId StkId $stkid

	nextstate BssapWaitConfirm
}

# CONNECT_ACK
proc RcvConnectAckPgRes { } {

	# Global Variables
	global _sig glBssapDb glMsId

	LogInputMsg $_sig
		
	set spcstkidcid [rd _sig SpcStkIdCid]
	set spc [GetSpc $spcstkidcid]
	set stkid [GetStkId $spcstkidcid]

	# Store SpcStkIdCid
	DbSet $glBssapDb $glMsId SpcStkIdCid $spcstkidcid
	DbSet $glBssapDb $glMsId Spc $spc
	DbSet $glBssapDb $glMsId StkId $stkid

	nextstate BssapWaitCnfForPaging
}

# CONNECT_IND
proc RcvConnectIndForHov { } {

	# Global Variables
	global _sig _state glSpcStkIdCid

	LogInputPrim $_sig
		
	set glSpcStkIdCid [rd _sig SpcStkIdCid]

	# Store Pdu in _sig
	set _sig [rd _sig Pdu]
	if { $_sig != "?"} {
		eval $_state
	}
}

# CONNECT_CNF
proc RcvConnectCnf { } {

	# Global Variables
	global _sig _state

	LogInputPrim $_sig

	SendRrEstCnf 

	# Store Pdu in _sig 
	set _sig [rd _sig Pdu]
	if { ![IsVoid $_sig] } {
		eval $_state
	}

	nextstate BssapConnectActive 
}

proc RcvConnectCnfForPaging { } {

	# Global Variables
	global _sig _state

	LogInputMsg $_sig

	SendRrEstInd 

	# Store Pdu in _sig 
	set _sig [rd _sig Pdu]
	if { $_sig != "?" } {
		eval $_state
	}

	nextstate BssapConnectActive
}

# DISCONNECT_IND
proc RcvDisconnectInd { } {

	# Global Variables
	global _sig _state glBssapPlmn glBssapDb glMsId 

	LogInputPrim $_sig

	# Store Pdu in _sig
	set _sig [rd _sig Pdu]
	if { $_sig != "?" } {
		eval $_state
	}

	#  only if we are not in External Handover proc
	set target [DbGet $glBssapDb $glMsId SpcStkIdCidTarget]
	if { [IsVoid $target]  } {	

		# Send Release Ind to MM
		set cause "Normal Event"
		SendRrRelInd $cause

		# Send System Info to MM
		set lai $glBssapPlmn
		append lai [DbGet $glBssapDb $glMsId LAC]
		new     RR_SYSINFO_IND s
		wr      s MsId $glMsId
		wr      s LAI $lai
		send    s
		LogOutputMsg $s

		nextstate BssapIdle
	}

	# Remove or change SS7 link for this instance
	BssapMovInst $glMsId
}

# DATA_IND
proc RcvDataInd { } {

	# Global Variables
	global _sig _state glMsId 

	LogInputMsg $_sig

	# Store Pdu in _sig 
	set _sig [rd _sig Pdu]
	if { $_sig != "?" } {
		eval $_state
	}
}

#------------------------------------------------------------#
# receiving primitives from upper level
#------------------------------------------------------------#

# RR_EST_REQ
proc RcvRrEstReq { } {

	# Global Variables
	global _sig glBssapDb glMsId
	global glVGCSBSSAPPid
	LogInputPrim $_sig

	set est_cause [rd _sig EstCause]
	set l3pdu [rd _sig Pdu]
	# Set Channel Type Infos
	set res [SetChannelType $est_cause]
	log "RcvRrEstReq: est_cause = $est_cause res = $res"
	switch -exact -- $est_cause {
		"Voice Group Call" {
			new VGCS_CALL_BEGIN s
			wr s MsId $glMsId	
			wr s SpcStkIdCid [DbGet $glBssapDb $glMsId SpcStkIdCid]
			send s $glVGCSBSSAPPid
		}
		"Subsequent Talker Uplink Request" {
			new VGCS_SUBTALKER s
			wr s MsId $glMsId
			wr s SpcStkIdCid [DbGet $glBssapDb $glMsId SpcStkIdCid]
			send s $glVGCSBSSAPPid
		}
	}

	if { $res == "-1" } {
		logscr "RR Establishment failed"
	} elseif { $res == "-2" } {
		log "RcvRrEstReq: est_cause = $est_cause"
		#new UL_REQ s
		#new BSSAP_CTL_SEND_ON_VGCS_LINK t
		#wr t SignalToSend $s
		#send t $glVGCSBSSAPPid
		#remcmd $glVGCSBSSAPPid "SendUplinkRequest"
	} else {
		SendInitialMsMsg $l3pdu
	}
}

# RR_DATA_REQ
proc RcvRrDataReq { } {

	# Global Variables
	global _sig   

	LogInputPrim $_sig

	# Dlci
	set dlci 0

	# retrieving "pdu" from RR_DATA_REQ
	set l3pdu [rd _sig Pdu]

	# sending DTAP_DATA
	SendDirectTransfer $dlci $l3pdu
}

# RR_NEWTMSI_REQ
proc RcvRrNewTmsiReq { } {

	# Global Variables
	global _sig glBssapDb glMsId

	LogInputMsg $_sig
	# Set new Tmsi
	DbSet $glBssapDb $glMsId TMSI [rd _sig TMSI]
}

#------------------------------------------------------------#
# sending primitives to upper level
#------------------------------------------------------------#

# BSSAP_CTL_RESET_ACK
proc SendBssapCtlResetAck { } {

	# Global Variables

	new 	BSSAP_CTL_RESET_ACK r

	send r
	LogOutputMsg $r
}

# RR_EST_CNF
proc SendRrEstCnf { } {

	# Global Variables
	global glMsId 

	new RR_EST_CNF r
	wr r MsId $glMsId

	send r
	LogOutputMsg $r
}

# RR_EST_IND
proc SendRrEstInd { } {

	# Global Variables
	global glMsId 

	# Warning: Index is stored in Cid
	new RR_EST_IND r
	wr r MsId $glMsId

	send r
	LogOutputMsg $r
}

# RR_REL_IND
proc SendRrRelInd { cause } {

	# Global Variables
	global glMsId

	new RR_REL_IND r
	wr r MsId $glMsId
	wr r Cause $cause

	send r
	LogOutputMsg $r
}

# RR_DATA_IND
proc SendRrDataInd { l3pdu } {

	# Global Variables
	global _sig glMsId
	
	new  RR_DATA_IND r 
	wr r MsId $glMsId
	wr r Pdu $l3pdu

	send r
	LogOutputPrim $r
}

# RR_SYNC_IND
proc SendRrSyncInd { res cause } {

	# Global Variables
	global _sig glMsId

	new RR_SYNC_IND r
	wr r MsId $glMsId
	wr r Res $res
	wr r Cause $cause

	send r
	LogOutputMsg $r
}

proc RcvRrJoicGcReq { } {
	global _sig _mmpid glRrGcReqMsId glRrGcReqGrCallRef
	global glBssapDb glMsId glVGCSBSSAPPid glMSVgcsDb
	set glRrGcReqMsId [rd _sig MsId]
	set glRrGcReqGrCallRef [rd _sig GroupCallRef]
	set grCallRef [rd _sig GroupCallRef]

	new VGCS_JOIN_REQ s
	wr s MsId $glMsId
	wr s SpcStkIdCid [DbGet $glBssapDb $glMsId SpcStkIdCid]
	wr s GroupCallRef $grCallRef
	send s $glVGCSBSSAPPid

	#new UL_RELSE_IND s
	#wr s cause 0e
	#new BSSAP_CTL_SEND_ON_VGCS_LINK t
	#wr t GroupCallReference $glRrGcReqGrCallRef
	#wr t SignalToSend $s

	#send t $glVGCSBSSAPPid

	#remcmd $glVGCSBSSAPPid [list SendOnVGCSDedicatedLink $s]

	nextstate WaitForDedicatedClearCommand
}

proc RcvRrAbortReq { } {
	global glMsId _sig
	set msId [rd _sig MsId]

	logscr "Received RR_ABORT_REQ for msId = $msId glMsId = $glMsId"

	SendClrReq 01 

}

proc RecvClearCommand { } {
	global _sig

	LogInputSigSig $_sig

	RcvClrCmd
	nextstate WaitForDisconnectInd
}

proc RecvDiscInd { } {
	nextstate BssapIdle
}

proc RecvDedClearCommand { } {
	global glRrGcReqGrCallRef glRrGcReqMsId
	new RR_JOIN_GC_CNF s
	wr s MsId $glRrGcReqMsId
	wr s GroupCallRef $glRrGcReqGrCallRef
	wr s Mode "group_receive"
	send s
	#Manage clear command as usual
	RcvClrCmd
	nextstate WaitForDedicatedDisconnectInd
}

proc RecvDediDiscInd { } {
	nextstate BssapIdle
}

proc RcvAsgReqBssapIdle { } {
	global glMsId glBssapDb glSpcStkIdCid
	DbSet $glBssapDb $glMsId SpcStkIdCid $glSpcStkIdCid
	SendSccpNConnectRes $glSpcStkIdCid ?
	RcvAssignmentReq
	nextstate BssapConnectActive
}

proc RecvJoinGcReqIdle { } {
	global glMsId glBssapDb glVGCSBSSAPPid _sig
	new RR_JOIN_GC_CNF s
	wr s MsId $glMsId
	send s
	new VGCS_JOIN_REQ t
	wr t MsId $glMsId
	wr t GroupCallRef [rd _sig GroupCallRef]
	send t $glVGCSBSSAPPid
}

proc RecvRstCircIdle { } {
	global _sig 
	# TODO: Manage the reset circuit from MSC
}

proc ClearTMSI { msId } {
	global glBssapDb 
	DbSet $glBssapDb $msId TMSI "?"
}

##############################################################
# FSM
##############################################################

state BssapWaitConfig {
	BSSAP_OM_CFG 			BssapConfig      
	default 				Unexpected
}

proc RcvRstCircAck { } {
	global numTs _gstate
	set numTs [expr $numTs - 1]

	if { $numTs == 0 } {
		nextstate $_gstate
	}

}

state WaitingForAllRstCircAck {
	RST_CIRC_ACK			RcvRstCircAck
	default 				Unexpected
}

state BssapIdle {
	CONNECT_ACK 			RcvConnectAck
	CONNECT_IND 			RcvConnectIndForHov
	RR_EST_REQ 				RcvRrEstReq
    PAG         			RcvPaging
	ASG_REQ					RcvAsgReqBssapIdle
	RR_JOIN_GC_REQ			RecvJoinGcReqIdle
	RST_CIRC				RecvRstCircIdle
	default 				Any
}

state BssapWaitForResetAck {
	RST_ACK 				RcvResetAck
	T_4						T_4Expired
	default					Unexpected
}

state BssapPagingResponse {
	CONNECT_ACK 			RcvConnectAckPgRes
	default					Any
}

state BssapWaitConfirm {
	CONNECT_CNF				RcvConnectCnf
	DTAP_DATA 				RcvDirectTransfer
	default 				Any
}

state BssapWaitCnfForPaging {
	CONNECT_CNF				RcvConnectCnfForPaging
	default 				Any
}

state BssapConnectActive {
	DTAP_DATA 				RcvDirectTransfer
	CPHR_MODE_CMD 			RcvCphrModeCmd
	COMMON_ID				RcvCommonId
	CLR_CMD					RcvClrCmd
	DISCONNECT_IND 			RcvDisconnectInd
	ASG_REQ 				RcvAssignmentReq
	PERF_LOC_REQ			RcvPerfLocReq
	RR_DATA_REQ 			RcvRrDataReq
	RR_NEWTMSI_REQ			RcvRrNewTmsiReq
	RR_JOIN_GC_REQ			RcvRrJoicGcReq
	RR_ABORT_REQ			RcvRrAbortReq
	default 				Any
}

state WaitForClearCommand {
	CLR_CMD					RecvClearCommand
	default { Unexpected }
}

state WaitForDisconnectInd {
	DISCONNECT_IND 			RecvDiscInd
	default { Unexpected }
}
state WaitForDedicatedClearCommand {
	CLR_CMD					RecvDedClearCommand
	default { Unexpected }
}

state WaitForDedicatedDisconnectInd {
	DISCONNECT_IND 			RecvDediDiscInd
	default { Unexpected }
}



state Any {
	BSSAP_CTL_RESET 		RcvCtlReset
	T_13					T_13Expired
	BSSAP_HOV_REQUIRED 		RcvBssapHov
	BSSAP_HOV_DETECT 		SendHovDetect
   	RST 					RcvReset
	BLKG_ACK				RcvBlkAck
	T_1						T_1Expired
	CIRC_GROUP_BLKG_ACK     RcvCircGroupBlkAck
	CLSMK_REQ				RcvClsmkReq
	HOV_REQ					RcvHovRequest
	HOV_CMD					RcvHovCommand
	default 				Unexpected
}

#EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE#

