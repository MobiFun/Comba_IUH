#####################################################
# $URL: http://memo.prisma/svn/tm/scriptProt/HNBAP/tags/HNBAP-1.3.0/scripts/hnbap_db.tsm $
#
# $Author: roger $
#
# Description: HNBAP Multi-Instance handler procedures
#
# $Rev: 53537 $
#
# $Date: 2012-07-27 15:55:36 +0200 (Fri, 27 Jul 2012) $
######################################################

# ================================================================
set gldb_HnbapEnb    "dbHnbapEnb"
set glEnbIdx ?

proc dbHnbapIuhCreate {} {

    lappend idxList [list EnbIdx                    Index       Read/Write]
    lappend idxList [list State                     Normal      Read/Write]
    lappend idxList [list SctpKey                   Key         Read/Write]; # SctpKey ::= <spc>-<stkId>-<sctpId>
    lappend idxList [list HNBIdentity                     Normal      Read/Write]
    lappend idxList [list PlmnIdentity                     Normal      Read/Write]
    lappend idxList [list CellIdentity                     Normal      Read/Write]
    lappend idxList [list CSGEnabled                     Normal      Read/Write]
    lappend idxList [list CsTLAddr                     Normal      Read/Write]
    lappend idxList [list LAC                     Normal      Read/Write]
    lappend idxList [list SAC                     Normal      Read/Write]
    lappend idxList [list RAC                     Normal      Read/Write]
    lappend idxList [list RNCId                     Normal      Read/Write]
    lappend idxList [list T_HNBREGid	   	Key 		Read/Write]
    lappend idxList [list T_HNBREGDelayid	Key 		Read/Write]
	
    DbCreate $::gldb_HnbapEnb $idxList
    foreach enbIdx [dbEnbGetIndexList] {
        DbCreateDefEntry $::gldb_HnbapEnb $enbIdx
        dbHnbapEnbNextState	$enbIdx	HnbapIdle
        dbHnbapEnbSet			$enbIdx HNBIdentity	[dbEnbGet $enbIdx HNBIdentity]
	dbHnbapEnbSet			$enbIdx PlmnIdentity	[dbEnbGet $enbIdx PlmnIdentity]
	dbHnbapEnbSet			$enbIdx CellIdentity	[dbEnbGet $enbIdx CellIdentity]
	dbHnbapEnbSet			$enbIdx CSGEnabled	[dbEnbGet $enbIdx CSGEnabled]
	dbHnbapEnbSet			$enbIdx CsTLAddr	[dbEnbGet $enbIdx CsTLAddr]
	dbHnbapEnbSet			$enbIdx LAC	[dbEnbGet $enbIdx LAC]
	dbHnbapEnbSet			$enbIdx SAC	[dbEnbGet $enbIdx SAC]
	dbHnbapEnbSet			$enbIdx RAC	[dbEnbGet $enbIdx RAC]
	dbHnbapEnbSet			$enbIdx RNCId	? ;# RNC ID is generated by GW	
 	dbHnbapEnbSet			$enbIdx T_HNBREGid	[tmrnew T_HNBREG 10000]
 	dbHnbapEnbSet			$enbIdx T_HNBREGDelayid	[tmrnew T_HNBREGDelay 3000]
       }
}

proc dbHnbapEnbThis {} {
	return $::glEnbIdx
}

proc dbHnbapEnbComposeSctpKey {spc stkId sctpId} {
    return "${spc}-${stkId}-${sctpId}"
}

proc dbHnbapEnbGetSctpKeyParts {enbIdx} {
    return [split [DbGet $::gldb_HnbapEnb $enbIdx SctpKey] -]
}

proc dbHnbapEnbGetIndexList {} {
    return [DbGetIndexList $::gldb_HnbapEnb]
}

proc dbHnbapEnbNextState { enbIdx stName } {
    DbSet $::gldb_HnbapEnb $enbIdx State $stName
    nextstate $stName
}

proc dbHnbapEnbSet { enbIdx fld val} {
    DbSet $::gldb_HnbapEnb $enbIdx $fld $val
}

proc dbHnbapEnbGet {enbIdx fld} {
    return [DbGet $::gldb_HnbapEnb $enbIdx $fld]
}

proc dbHnbapEnbInstSet { fld val } {
    DbSet $::gldb_HnbapEnb $::glEnbIdx $fld $val
}

proc dbHnbapEnbInstGet {fld} {
    return [DbGet $::gldb_HnbapEnb $::glEnbIdx $fld]
}

proc dbHnbapEnbInstNextState { stName } {
	DbSet $::gldb_HnbapEnb $::glEnbIdx State $stName
	nextstate $stName
}
proc dbHnbapEnbInstGet {fld} {
    return [DbGet $::gldb_HnbapUe $::glEnbIdx $fld]
}

### ::gldb_HnbapUe operation ###
proc dbHnbapEnbUeGetIndexList {} {
    return [DbGetIndexList $::gldb_HnbapUe]
}

proc dbHnbapEnbUeNextState { UeIdx stName } {
    DbSet $::gldb_HnbapUe $UeIdx State $stName
    nextstate $stName
}

proc dbHnbapEnbUeSet { UeIdx fld val} {
    DbSet $::gldb_HnbapUe $UeIdx $fld $val
}

proc dbHnbapEnbUeGet {UeIdx fld} {
    return [DbGet $::gldb_HnbapUe $UeIdx $fld]
}




# enodeB multi-instance utilities ----------------------

proc dbHnbapEnbGetInst { enbIdx } {
    GetInstanceNoSwap $enbIdx $::gldb_HnbapEnb ::glEnbIdx
}

proc dbHnbapEnbGetInstByTimer {} {  	
    GetInstanceFromTimerNoSwap $::gldb_HnbapEnb ::glEnbIdx
}

proc dbHnbapEnbGetInstBySctpKey {spc stkId sctpId} {

    set key [dbHnbapEnbComposeSctpKey $spc $stkId $sctpId]
    if { [DbKeyExists $::gldb_HnbapEnb SctpKey $key] } {
        set enbIdx [DbGetIdx $::gldb_HnbapEnb SctpKey $key]
        log "dbHnbapEnbGetInstBySctpKey: key=$key => enbIdx=$enbIdx"
        dbHnbapEnbGetInst $enbIdx
    } else {
        abort "dbHnbapEnbGetInstBySctpKey: failed for $spc $stkId $sctpId"
    }
}

# ================================================================

set gldb_HnbapAssoc    "dbHnbapAssoc"
set glAssocIdx ?; # <enbIdx>-<mmeIdx>

proc dbHnbapAssocCreate {} {

    # Idx ::= <enbIdx>-<mmeIdx>
    # AssocKey ::= <spc>-<stkId>-<sctpId>-<assocId>
    lappend idxList [list Idx                       Index       Read/Write] 
    lappend idxList [list State                     Normal      Read/Write]
    lappend idxList [list AssocKey                  Key         Read/Write]
    lappend idxList [list T_SCTP_ASSOCIATEid        Key         Read/Write]
    lappend idxList [list T_WAIT_BEFORE_NEXT_REQid  Key         Read/Write]
    lappend idxList [list PeerIpPort                Normal      Read/Write]
    lappend idxList [list EpcInitReset              Normal      Read/Write]
    lappend idxList [list ResetType                 Normal      Read/Write]
    lappend idxList [list ResetUeAssLogConnList     Normal      Read/Write]

    DbCreate $::gldb_HnbapAssoc $idxList

    foreach enbIdx [dbEnbGetIndexList] {
        set mmeList [dbEnbGet $enbIdx CtlPeerNetElemList]
        if { ![IsVoid $mmeList] } {
            foreach mme $mmeList {
                # mme = {mmeIdx [ip/port]}
                lassign {mmeIdx mmeIpPort} $mme
                if { [string equal $mmeIpPort ""] } {
                    set mmeIpPort [dbMmeGet $mmeIdx CtlLocalIpPort]
                    log "dbHnbapAssocCreate: default mmeIpPort=$mmeIpPort"
                }
                set assocIdx "${enbIdx}-${mmeIdx}"
                log "dbHnbapAssocCreate: assocIdx=$assocIdx, mmeIpPort=$mmeIpPort"
                DbCreateDefEntry $::gldb_HnbapAssoc $assocIdx
                dbHnbapAssocSet $assocIdx PeerIpPort $mmeIpPort
                dbHnbapAssocSet $assocIdx T_SCTP_ASSOCIATEid       [tmrnew T_SCTP_ASSOCIATE       60000]
                dbHnbapAssocSet $assocIdx T_WAIT_BEFORE_NEXT_REQid [tmrnew T_WAIT_BEFORE_NEXT_REQ 60000]; # modified at Hnbap_SETUP_FLR
                dbHnbapAssocNextState $assocIdx stAssoc_down
            }
        }
    }
}

proc dbHnbapAssocThis {} {
	return $::glAssocIdx
}

proc dbHnbapAssocSetThis {enbIdx mmeIdx} {
    log "dbHnbapAssocSetThis: ${enbIdx}-${mmeIdx}"
    set ::glAssocIdx "${enbIdx}-${mmeIdx}"
    return $::glAssocIdx
}

proc dbHnbapAssocGetEnbIdxMmeIdx {assocIdx} {
    return [split $assocIdx -]
}

proc dbHnbapAssocInstGetEnbIdxMmeIdx {} {
	return [split $::glAssocIdx -]
}

#proc dbHnbapAssocEntryExists {enbIdx mmeIdx} {
#	return [DbEntryExists $::gldb_HnbapAssoc "${enbIdx}-${mmeIdx}"]
#}

proc dbHnbapAssocGetIndexList {} {
	return [DbGetIndexList $::gldb_HnbapAssoc]
}

proc dbHnbapAssocNextState { assocIdx stName } {
    DbSet $::gldb_HnbapAssoc $assocIdx State $stName
    nextstate $stName
}

proc dbHnbapAssocSet { assocIdx fld val} {
    DbSet $::gldb_HnbapAssoc $assocIdx $fld $val
}

proc dbHnbapAssocGet {assocIdx fld} {
    return [DbGet $::gldb_HnbapAssoc $assocIdx $fld]
}

proc dbHnbapAssocGetPeerIpPort {assocIdx} {
	return [split [DbGet $::gldb_HnbapAssoc $assocIdx PeerIpPort] /]
}

proc dbAssocGetPeerIdxByIpPort {enbIdx ip port} {
	set mmeIdx ?
	foreach idx [DbGetIndexList $::gldb_HnbapAssoc "${enbIdx}-*"] {
		set peerIpPort [dbHnbapAssocGet $idx PeerIpPort]
		if { [string equal $peerIpPort "${ip}/${port}"] } {
			set mmeIdx [lindex [split $idx -] end]
		}
	}
    return $mmeIdx
}

proc dbHnbapAssocInstSet { fld val} {
    DbSet $::gldb_HnbapAssoc $::glAssocIdx $fld $val
}

proc dbHnbapAssocInstGet {fld} {
    return [DbGet $::gldb_HnbapAssoc $::glAssocIdx $fld]
}

proc dbHnbapAssocInstNextState { stName } {
    DbSet $::gldb_HnbapAssoc $::glAssocIdx State $stName
    nextstate $stName
}

proc dbHnbapAssocInstSetAssocKey {spc stkId sctpId assId} {
    DbSet $::gldb_HnbapAssoc $::glAssocIdx AssocKey "$spc-$stkId-$sctpId-$assId"
}

proc dbHnbapAssocInstGetAssocKeyParts {} {
    return [split [DbGet $::gldb_HnbapAssoc $::glAssocIdx AssocKey] -]
}

# association multi-instance utilities ----------------------

proc dbHnbapAssocGetInst {assIdx} {
	GetInstanceNoSwap $assIdx $::gldb_HnbapAssoc ::glAssocIdx
	lassign {::glEnbIdx ::glMmeIdx} [split $::glAssocIdx -]
}

proc dbHnbapAssocGetInstByAssocKey {spc stkId sctpId assId} {
    set key "${spc}-${stkId}-${sctpId}-${assId}"
    if { [DbKeyExists $::gldb_HnbapAssoc AssocKey $key] } {
        set assocIdx [DbGetIdx $::gldb_HnbapAssoc AssocKey $key]
        dbHnbapAssocGetInst $assocIdx
    } else {
        abort "dbHnbapAssocGetInstByAssocKey: failed for $spc $stkId $sctpId $assId"
    }  
}

proc dbHnbapAssocGetInstByTimer {} {
	GetInstanceFromTimerNoSwap $::gldb_HnbapAssoc ::glAssocIdx
	lassign {::glEnbIdx ::glMmeIdx} [split $::glAssocIdx -]
}

# ================================================================
set gldb_HnbapUe    "dbHnbapUe"
set glHnbapUeIdx    ?

proc dbHnbapUeCreate {} {
    # HNB side : UE DB is filled by commonDb when initialization
    # HnbapUeIdx ::= <MsId>
    	lappend idxList [list HnbapUeIdx                  Index      Read/Write]
    	lappend	idxList	[list State				Normal		Read/Write]
	lappend idxList [list HNB_ID		    Normal      Read/Write]
	lappend idxList [list ContextId	    	Key         Read/Write]
	lappend idxList [list T_HNBUeREGid	   	Key 		Read/Write]
	lappend idxList [list AS_REL		    Normal      Read/Write]
	lappend idxList [list CSG_IND		    Normal      Read/Write]
	lappend idxList [list T_UEDeRegid		Key         Read/Write]
	lappend idxList [list UE_IDType			Normal      Read/Write]
	lappend idxList [list UE_ID			    Key      Read/Write]
	lappend idxList [list SIG			    Normal      Read/Write]
	lappend idxList [list ApId			    Normal      Read/Write]
	# Create Db
	DbCreate $::gldb_HnbapUe $idxList


  	foreach msid [DbGetIndexList $::glCommonDb] {
		set sHnbId [DbGet $::glCommonDb $msid sHnbId]
		if { ![DbEntryExists $::gldb_HnbapEnb $sHnbId] } {
			logscr "ERROR: Can not find related HNodeB (HNB_ID:$sHnbId) for Ms ($msid)"
			continue
		}
		DbCreateDefEntry $::gldb_HnbapUe $msid
		DbSet $::gldb_HnbapUe $msid ContextId ?
		DbSet $::gldb_HnbapUe $msid HNB_ID $sHnbId
		DbSet $::gldb_HnbapUe $msid T_HNBUeREGid [tmrnew T_HNBUeREG 10000]
		## This timer start after sending RUA DISCONNECT. When it expires,send HNBAP UE DEREGISTER
		DbSet $::gldb_HnbapUe $msid T_UEDeRegid [tmrnew T_UEDeReg 500]
		###  HNBAP_r99 = 0,HNBAP_rel_4 = 1,HNBAP_rel_5 = 2,HNBAP_rel_6 = 3, HNBAP_rel_7 = 4,HNBAP_rel_8 = 5
		DbSet $::gldb_HnbapUe $msid AS_REL 3
		###HNBAP_csg_capable = 0,HNBAP_not_csg_capable = 1
		DbSet $::gldb_HnbapUe $msid CSG_IND 1
		DbSet $::gldb_HnbapUe $msid State UeIdle
		DbSet $::gldb_HnbapUe $msid UE_IDType 1
		DbSet $::gldb_HnbapUe $msid UE_ID [DbGet $::glCommonDb $msid IMSI]
		DbSet $::gldb_HnbapUe $msid ApId [DbGet $::glCommonDb $msid sHnbId]
	}
}

proc dbHnbapUeComposeIdx {cellIdx ueIdx} {
    return "${cellIdx}/${ueIdx}"
}

proc dbHnbapUeInstGetCellIdx {} {
    lassign {enbIdx cell_Num ueIdx} [split $::glHnbapUeIdx /]
    return "${enbIdx}/${cell_Num}"
}

proc dbHnbapUeInstGetEnbIdx {} {
    lassign {enbIdx cell_Num ueIdx} [split $::glHnbapUeIdx /]
    return ${enbIdx}
}

proc dbHnbapUeComposeUeIdKey {assocIdx enbUeId} {
    return "${assocIdx}-${enbUeId}"
}

proc dbHnbapUeEntryExists {hnbapUeIdx} {
    return [DbEntryExists $::gldb_HnbapUe $hnbapUeIdx]
}

proc dbHnbapUeAddEntry {hnbapUeIdx mmeIdx} {
    log "dbHnbapUeAddEntry: hnbapUeIdx=$hnbapUeIdx"
    DbCreateDefEntry $::gldb_HnbapUe $hnbapUeIdx
    set ::glHnbapUeIdx $hnbapUeIdx
    dbHnbapUeInstSet MmeIdx $mmeIdx
    #dbHnbapUeInstSet T_FAKE_HOIN_MSCREATEid  [tmrnew T_FAKE_HOIN_MSCREATE  3000]
    dbHnbapAssocSetThis [dbHnbapUeInstGetEnbIdx] $mmeIdx
}

proc dbHnbapUeRemEntry {hnbapUeIdx} {
    log "dbHnbapUeRemEntry: hnbapUeIdx=$hnbapUeIdx"
    forEachDbTimer $::gldb_HnbapUe $hnbapUeIdx t { tmrfree $t }    
    DbRemEntry $::gldb_HnbapUe $hnbapUeIdx
}

proc dbHnbapUeThis {} {
    return $::glHnbapUeIdx
}

proc dbHnbapUeInstGetUeIdx {} {
    set ueIdx [lindex [split $::glHnbapUeIdx /] end]
    return $ueIdx
}

proc dbHnbapUeGetIndexList {} {
    return [DbGetIndexList $::gldb_HnbapUe]
}

proc dbHnbapUeNextState { hnbapUeIdx stName } {
    DbSet $::gldb_HnbapUe $hnbapUeIdx State $stName
    nextstate $stName
}

proc dbHnbapUeSet { hnbapUeIdx fld val} {
    DbSet $::gldb_HnbapUe $hnbapUeIdx $fld $val
}

proc dbHnbapUeGet {hnbapUeIdx fld} {
    return [DbGet $::gldb_HnbapUe $hnbapUeIdx $fld]
}

proc dbHnbapUeInstSet {fld val} {
    DbSet $::gldb_HnbapUe $::glHnbapUeIdx $fld $val
}

proc dbHnbapUeInstGet {fld} {
    return [DbGet $::gldb_HnbapUe $::glHnbapUeIdx $fld]
}

proc dbHnbapUeInstNextState { stName } {
    DbSet $::gldb_HnbapUe $::glHnbapUeIdx State $stName
    nextstate $stName
}

# UE multi-instance utilities ----------------------
proc dbHnbapEnbUeGetInst { ueIdx } {
    GetInstanceNoSwap $ueIdx $::gldb_HnbapUe ::glHnbapUeIdx
}

proc dbHnbapUeGetInst { } {
	
	global  _sig
	
	set Ue_ID [rd _sig UeId]
	set ue_value [rd Ue_ID Value]; #UE_ID
	set ue_value [Get24008FormatFromImsi [GetHumanNumberFrom24008 81${ue_value}]]
	log "dbHnbapUeGetInst: UE ID = $ue_value"
	if { [DbKeyExists $::gldb_HnbapUe UE_ID $ue_value] } {
		set index [DbGetIdx $::gldb_HnbapUe UE_ID $ue_value]
		dbHnbapEnbUeGetInst $index
		} else {
		logscr "WARNING: skipMsg. HnbapUeGetInstanceHnd failed $_sig"
		skipMsg
		return -1
	}
}

proc dbHnbapUeGetInstByTimer {} {
	#global _src
	GetInstanceFromTimerNoSwap $::gldb_HnbapUe ::glHnbapUeIdx
	#log "leon debug: MS ID ($::glHnbapUeIdx) found from timer $_src"
}

proc dbHnbapUeGetInstByAssocEnbUeId {assocIdx enbUeId} {
    set k [dbHnbapUeComposeUeIdKey $assocIdx $enbUeId]
    log "dbHnbapUeGetInstByAssocEnbUeId: assocIdx=$assocIdx, enbUeId=$enbUeId, k=$k"
    if { [DbKeyExists $::gldb_HnbapUe AssocEnbUeIdKey $k] } {
        set idx [DbGetIdx $::gldb_HnbapUe AssocEnbUeIdKey $k]
        GetInstanceNoSwap $idx $::gldb_HnbapUe ::glHnbapUeIdx
        return 1
    } else {
        return 0
    }
}

proc dbHnbapUeGetInstByAssocMmeUeId {assocIdx mmeUeId} {
    set k [dbHnbapUeComposeUeIdKey $assocIdx $mmeUeId]
    log "dbHnbapUeGetInstByAssocMmeUeId: assocIdx=$assocIdx, mmeUeId=$mmeUeId, k=$k"
    if { [DbKeyExists $::gldb_HnbapUe AssocMmeUeIdKey $k] } {
        set idx [DbGetIdx $::gldb_HnbapUe AssocMmeUeIdKey $k]
        GetInstanceNoSwap $idx $::gldb_HnbapUe ::glHnbapUeIdx
        return 1
    } else {
        return 0
    }
}
